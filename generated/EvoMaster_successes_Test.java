import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import  org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  java.util.List;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2024-01-16T11:57:51.708-03:00[America/Argentina/Buenos_Aires]
 * <br>
 * The generated test suite contains 7 tests
 * <br>
 * Covered targets: 15
 * <br>
 * Used time: 0h 3m 0s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent successful calls.
 */
public class EvoMaster_successes_Test {

    
    private static final SutHandler controller = new *AppController();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * sco - supported code oracle - checking that the response status code is among those supported according to the schema
    */
    private static boolean sco = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.registerOrExecuteInitSqlCommandsIfNeeded();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test @Timeout(60)
    public void test_0() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/fisher/692/597/0.3662829491684446?EMextraParam123=_EM_0_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsDouble'", numberMatches(6.008253902601927E-16));
        
    }
    
    
    @Test @Timeout(60)
    public void test_1() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get(baseUrlOfSut + "/api/triangle/911/633/864")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(1.0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_2() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/bessj/347/0.8661732014949468?EMextraParam123=_EM_4_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsDouble'", numberMatches(0.0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_3() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/expint/938278723/0.8797382520334956")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsDouble'", numberMatches(4.421836325797059E-10));
        
    }
    
    
    @Test @Timeout(60)
    public void test_4() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get(baseUrlOfSut + "/api/gammq/0.41524376784441963/0.8752028796271115")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsDouble'", numberMatches(0.1488984795785232));
        
    }
    
    
    @Test @Timeout(60)
    public void test_5() throws Exception {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get(baseUrlOfSut + "/api/remainder/504/291")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(213.0));
        
    }
    
    
    @Test @Timeout(60)
    public void test_6() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        ValidatableResponse res_0 = given().accept("*/*")
                .get(baseUrlOfSut + "/swagger.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'swagger'", containsString("2.0"))
                .body("'info'.'description'", containsString("Examples of different numerical algorithms accessible via REST"))
                .body("'info'.'version'", containsString("1.0"))
                .body("'info'.'title'", containsString("API for Numerical Case Study (NCS)"))
                .body("'schemes'.size()", equalTo(1))
                .body("'schemes'", hasItems("http"))
                .body("'basePath'", containsString("/"))
                .body("'tags'.size()", equalTo(1))
                .body("'tags'[0].'name'", containsString("ncs-rest"))
                .body("'tags'[0].'description'", containsString("Ncs Rest"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'summary'", containsString("bessj"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'operationId'", containsString("bessjUsingGET"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'name'", containsString("n"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'description'", containsString("n"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'name'", containsString("x"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'description'", containsString("x"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'type'", containsString("number"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'format'", containsString("double"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'summary'", containsString("expint"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'operationId'", containsString("expintUsingGET"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'name'", containsString("n"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'description'", containsString("n"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'name'", containsString("x"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'description'", containsString("x"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'type'", containsString("number"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'format'", containsString("double"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'summary'", containsString("fisher"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'operationId'", containsString("fisherUsingGET"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'name'", containsString("m"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'description'", containsString("m"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'name'", containsString("n"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'description'", containsString("n"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'format'", containsString("int32"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'name'", containsString("x"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'description'", containsString("x"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'type'", containsString("number"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'format'", containsString("double"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'summary'", containsString("gammq"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'operationId'", containsString("gammqUsingGET"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'name'", containsString("a"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'description'", containsString("a"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'type'", containsString("number"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'format'", containsString("double"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'name'", containsString("x"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'description'", containsString("x"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'type'", containsString("number"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'format'", containsString("double"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'summary'", containsString("remainder"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'operationId'", containsString("remainderUsingGET"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'name'", containsString("a"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'description'", containsString("a"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'name'", containsString("b"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'description'", containsString("b"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'format'", containsString("int32"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'summary'", containsString("Check the triangle type of the given three edges"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'operationId'", containsString("checkTriangleUsingGET"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'name'", containsString("a"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'description'", containsString("First edge"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'required'", equalTo(false))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'name'", containsString("b"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'description'", containsString("Second edge"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'required'", equalTo(false))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'format'", containsString("int32"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'name'", containsString("c"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'description'", containsString("Third edge"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'type'", containsString("integer"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'format'", containsString("int32"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'200'.'schema'.'$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'deprecated'", equalTo(false))
                .body("'definitions'.'Dto'.'type'", containsString("object"))
                .body("'definitions'.'Dto'.'properties'.'resultAsDouble'.'type'", containsString("number"))
                .body("'definitions'.'Dto'.'properties'.'resultAsDouble'.'format'", containsString("double"))
                .body("'definitions'.'Dto'.'properties'.'resultAsInt'.'type'", containsString("integer"))
                .body("'definitions'.'Dto'.'properties'.'resultAsInt'.'format'", containsString("int32"))
                .body("'definitions'.'Dto'.'title'", containsString("Dto"));
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, Arrays.asList().contains(res_0.extract().statusCode()));
    }


}
