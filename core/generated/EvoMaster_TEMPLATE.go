package generated

import (
	"github.com/stretchr/testify/suite"
	"net/http"
	"testing"
	"time"
)

/**
 * This file was automatically generated by EvoMaster on 2024-02-20T11:14:13.801-03:00[America/Argentina/Buenos_Aires]
 *
 * The generated test suite contains 1 tests
 *
 * Covered targets: 4
 *
 * Used time: 0h 0m 10s
 *
 * Needed budget for current results: 100%
 *
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */

type MyTest struct {
	suite.Suite
	Controller   *AppController
	BaseUrlOfSut string
}

func TestSuite(t *testing.T) {
	suite.Run(t, new(MyTest))
}

func (suite *MyTest) SetupSuite() {
	suite.Controller = &AppController{}
	suite.Controller.SetHost("localhost")
	suite.Controller.SetPort(5001)

	suite.BaseUrlOfSut = suite.Controller.StartSut()
}

func (suite *MyTest) TearDownSuite() {
	suite.Controller.StopSut()

	for suite.Controller.IsSutRunning() {
		time.Sleep(100 * time.Millisecond)
	}
}

func (suite *MyTest) SetupTest() {
	suite.Controller.ResetStateOfSUT()
}

//test("test_0_with500", async () => {
//
//	const res_0 = await superagent
//	.get(baseUrlOfSut + "/api/fisher/336/0/-3309709.234405788").set('Accept', "*/*")
//	.set("x-EMextraHeader123", "")
//	.ok(res => res.status);
//
//	expect(res_0.status).toBe(500); //
//	expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
//});

func (suite *MyTest) Test_0_with500() {
	// Build Request
	url := "http://" + suite.BaseUrlOfSut + "/api/fisher/336/0/-3309709.234405788"
	req, err := http.NewRequest(http.MethodGet, url, nil)
	suite.Nil(err, "Request creation error must be nil")

	req.Header.Set("Accept", "*/*")
	req.Header.Set("x-EMextraHeader123", "")

	// Request
	resp, err := http.DefaultClient.Do(req)
	suite.NoError(err, "Request error must be nil")
	defer resp.Body.Close()

	// Expect
	suite.Equal(http.NoBody, resp.Body)
	suite.Equal(http.StatusInternalServerError, resp.StatusCode)
}
