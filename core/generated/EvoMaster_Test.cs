using  System;
using  System.Text;
using  System.Linq;
using  Xunit;
using  System.Net.Http;
using  System.Net.Http.Headers;
using  System.Threading.Tasks;
using  Newtonsoft.Json;
using  EvoMaster.Controller;




/**
 * This file was automatically generated by EvoMaster on 2024-02-09T11:41:55.232-03:00[America/Argentina/Buenos_Aires]
 * 
 * The generated test suite contains 14 tests
 * 
 * Covered targets: 31
 * 
 * Used time: 0h 0m 10s
 * 
 * Needed budget for current results: 100%
 * 
 * 
 */
namespace EvoMasterTests{
    public class ControllerFixture : IDisposable {
        
        
        public ISutHandler controller { get; private set; }
        public string baseUrlOfSut { get; private set; }
        
        public ControllerFixture() {
            
            controller = new *AppController();
            controller.SetupForGeneratedTest();
            baseUrlOfSut = controller.StartSut ();
            Assert.NotNull(baseUrlOfSut);
        }
        
        public void Dispose() {
            controller.StopSut ();
        }
    }
    
    public class EvoMaster_Test : IClassFixture<ControllerFixture> {
    
        
        private ControllerFixture _fixture;
        
        
        private static readonly HttpClient Client = new HttpClient ();
        
        
        public EvoMaster_Test (ControllerFixture fixture) {
            _fixture = fixture;
            _fixture.controller.ResetStateOfSut();
        }
        
        
        
        
        [Fact]
        public async Task test_0_with500() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "*/*");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/fisher/-282/302/0.8652466431?EMextraParam123=_EM_0_XYZ_");;
            
            Assert.Equal(500, (int) res_0.StatusCode); // 
            Assert.True(string.IsNullOrEmpty(await res_0.Content.ReadAsStringAsync()));
        }
        
        
        [Fact]
        public async Task test_1_with500() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "*/*");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/gammq/4.4942328371557893E307/2.808895523222368E307");;
            
            Assert.Equal(500, (int) res_0.StatusCode); // 
            Assert.True(string.IsNullOrEmpty(await res_0.Content.ReadAsStringAsync()));
        }
        
        
        [Fact]
        public async Task test_2() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "application/json");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/fisher/230/302/0.8652466431144471?EMextraParam123=_EM_0_XYZ_");;
            
            Assert.Equal(200, (int) res_0.StatusCode);
            Assert.Contains("application/json", res_0.Content.Headers.GetValues("Content-Type").First());
            dynamic body_1 = JsonConvert.DeserializeObject(await res_0.Content.ReadAsStringAsync());
            Assert.True(body_1.resultAsDouble == 0.11954516950422153);
        }
        
        
        [Fact]
        public async Task test_3() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "application/json");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/triangle/717/412/793?EMextraParam123=_EM_2_XYZ_");;
            
            Assert.Equal(200, (int) res_0.StatusCode);
            Assert.Contains("application/json", res_0.Content.Headers.GetValues("Content-Type").First());
            dynamic body_1 = JsonConvert.DeserializeObject(await res_0.Content.ReadAsStringAsync());
            Assert.True(body_1.resultAsInt == 1.0);
        }
        
        
        [Fact]
        public async Task test_4() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "application/json");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/bessj/956/0.5820900437762087");;
            
            Assert.Equal(200, (int) res_0.StatusCode);
            Assert.Contains("application/json", res_0.Content.Headers.GetValues("Content-Type").First());
            dynamic body_1 = JsonConvert.DeserializeObject(await res_0.Content.ReadAsStringAsync());
            Assert.True(body_1.resultAsDouble == 0.0);
        }
        
        
        [Fact]
        public async Task test_5() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "application/json");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/expint/806/0.8586553447262455?EMextraParam123=_EM_6_XYZ_");;
            
            Assert.Equal(200, (int) res_0.StatusCode);
            Assert.Contains("application/json", res_0.Content.Headers.GetValues("Content-Type").First());
            dynamic body_1 = JsonConvert.DeserializeObject(await res_0.Content.ReadAsStringAsync());
            Assert.True(body_1.resultAsDouble == 5.258129426140745E-4);
        }
        
        
        [Fact]
        public async Task test_6() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "application/json");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/gammq/0.08011342100066976/0.5684613404444818?EMextraParam123=_EM_8_XYZ_");;
            
            Assert.Equal(200, (int) res_0.StatusCode);
            Assert.Contains("application/json", res_0.Content.Headers.GetValues("Content-Type").First());
            dynamic body_1 = JsonConvert.DeserializeObject(await res_0.Content.ReadAsStringAsync());
            Assert.True(body_1.resultAsDouble == 0.040591090855230716);
        }
        
        
        [Fact]
        public async Task test_7() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "application/json");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/remainder/898/62");;
            
            Assert.Equal(200, (int) res_0.StatusCode);
            Assert.Contains("application/json", res_0.Content.Headers.GetValues("Content-Type").First());
            dynamic body_1 = JsonConvert.DeserializeObject(await res_0.Content.ReadAsStringAsync());
            Assert.True(body_1.resultAsInt == 30.0);
        }
        
        
        [Fact]
        public async Task test_8() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "*/*");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/swagger.json");;
            
            Assert.Equal(200, (int) res_0.StatusCode);
            Assert.Contains("application/json", res_0.Content.Headers.GetValues("Content-Type").First());
            dynamic body_1 = JsonConvert.DeserializeObject(await res_0.Content.ReadAsStringAsync());
            Assert.True(body_1.swagger == "2.0");
            Assert.True(body_1.info.description == "Examples of different numerical algorithms accessible via REST");
            Assert.True(body_1.info.version == "1.0");
            Assert.True(body_1.info.title == "API for Numerical Case Study (NCS)");
            Assert.True(body_1.schemes.Count == 1);
            Assert.True(body_1.schemes[0] == "http");
            Assert.True(body_1.basePath == "/");
            Assert.True(body_1.tags.Count == 1);
            Assert.True(body_1.tags[0].name == "ncs-rest");
            Assert.True(body_1.tags[0].description == "Ncs Rest");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.tags.Count == 1);
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.tags[0] == "ncs-rest");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.summary == "bessj");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.operationId == "bessjUsingGET");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.produces.Count == 1);
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.produces[0] == "application/json");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters.Count == 2);
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[0].name == "n");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[0].in == "path");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[0].description == "n");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[0].required == true);
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[0].type == "integer");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[0].format == "int32");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[1].name == "x");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[1].in == "path");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[1].description == "x");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[1].required == true);
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[1].type == "number");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.parameters[1].format == "double");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.responses.200.description == "OK");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.responses.200.schema.$ref == "#/definitions/Dto");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.responses.200.schema.originalRef == "Dto");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.responses.401.description == "Unauthorized");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.responses.403.description == "Forbidden");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.responses.404.description == "Not Found");
            Assert.True(body_1.paths./api/bessj/{n}/{x}.get.deprecated == false);
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.tags.Count == 1);
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.tags[0] == "ncs-rest");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.summary == "expint");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.operationId == "expintUsingGET");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.produces.Count == 1);
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.produces[0] == "application/json");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters.Count == 2);
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[0].name == "n");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[0].in == "path");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[0].description == "n");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[0].required == true);
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[0].type == "integer");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[0].format == "int32");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[1].name == "x");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[1].in == "path");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[1].description == "x");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[1].required == true);
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[1].type == "number");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.parameters[1].format == "double");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.responses.200.description == "OK");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.responses.200.schema.$ref == "#/definitions/Dto");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.responses.200.schema.originalRef == "Dto");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.responses.401.description == "Unauthorized");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.responses.403.description == "Forbidden");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.responses.404.description == "Not Found");
            Assert.True(body_1.paths./api/expint/{n}/{x}.get.deprecated == false);
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.tags.Count == 1);
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.tags[0] == "ncs-rest");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.summary == "fisher");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.operationId == "fisherUsingGET");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.produces.Count == 1);
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.produces[0] == "application/json");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters.Count == 3);
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[0].name == "m");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[0].in == "path");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[0].description == "m");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[0].required == true);
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[0].type == "integer");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[0].format == "int32");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[1].name == "n");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[1].in == "path");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[1].description == "n");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[1].required == true);
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[1].type == "integer");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[1].format == "int32");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[2].name == "x");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[2].in == "path");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[2].description == "x");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[2].required == true);
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[2].type == "number");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.parameters[2].format == "double");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.responses.200.description == "OK");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.responses.200.schema.$ref == "#/definitions/Dto");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.responses.200.schema.originalRef == "Dto");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.responses.401.description == "Unauthorized");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.responses.403.description == "Forbidden");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.responses.404.description == "Not Found");
            Assert.True(body_1.paths./api/fisher/{m}/{n}/{x}.get.deprecated == false);
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.tags.Count == 1);
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.tags[0] == "ncs-rest");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.summary == "gammq");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.operationId == "gammqUsingGET");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.produces.Count == 1);
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.produces[0] == "application/json");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters.Count == 2);
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[0].name == "a");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[0].in == "path");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[0].description == "a");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[0].required == true);
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[0].type == "number");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[0].format == "double");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[1].name == "x");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[1].in == "path");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[1].description == "x");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[1].required == true);
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[1].type == "number");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.parameters[1].format == "double");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.responses.200.description == "OK");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.responses.200.schema.$ref == "#/definitions/Dto");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.responses.200.schema.originalRef == "Dto");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.responses.401.description == "Unauthorized");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.responses.403.description == "Forbidden");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.responses.404.description == "Not Found");
            Assert.True(body_1.paths./api/gammq/{a}/{x}.get.deprecated == false);
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.tags.Count == 1);
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.tags[0] == "ncs-rest");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.summary == "remainder");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.operationId == "remainderUsingGET");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.produces.Count == 1);
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.produces[0] == "application/json");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters.Count == 2);
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[0].name == "a");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[0].in == "path");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[0].description == "a");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[0].required == true);
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[0].type == "integer");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[0].format == "int32");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[1].name == "b");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[1].in == "path");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[1].description == "b");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[1].required == true);
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[1].type == "integer");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.parameters[1].format == "int32");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.responses.200.description == "OK");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.responses.200.schema.$ref == "#/definitions/Dto");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.responses.200.schema.originalRef == "Dto");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.responses.401.description == "Unauthorized");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.responses.403.description == "Forbidden");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.responses.404.description == "Not Found");
            Assert.True(body_1.paths./api/remainder/{a}/{b}.get.deprecated == false);
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.tags.Count == 1);
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.tags[0] == "ncs-rest");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.summary == "Check the triangle type of the given three edges");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.operationId == "checkTriangleUsingGET");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.produces.Count == 1);
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.produces[0] == "application/json");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters.Count == 3);
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[0].name == "a");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[0].in == "path");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[0].description == "First edge");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[0].required == false);
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[0].type == "integer");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[0].format == "int32");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[1].name == "b");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[1].in == "path");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[1].description == "Second edge");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[1].required == false);
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[1].type == "integer");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[1].format == "int32");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[2].name == "c");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[2].in == "path");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[2].description == "Third edge");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[2].required == false);
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[2].type == "integer");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.parameters[2].format == "int32");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.responses.200.description == "OK");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.responses.200.schema.$ref == "#/definitions/Dto");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.responses.200.schema.originalRef == "Dto");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.responses.401.description == "Unauthorized");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.responses.403.description == "Forbidden");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.responses.404.description == "Not Found");
            Assert.True(body_1.paths./api/triangle/{a}/{b}/{c}.get.deprecated == false);
            Assert.True(body_1.definitions.Dto.type == "object");
            Assert.True(body_1.definitions.Dto.properties.resultAsDouble.type == "number");
            Assert.True(body_1.definitions.Dto.properties.resultAsDouble.format == "double");
            Assert.True(body_1.definitions.Dto.properties.resultAsInt.type == "integer");
            Assert.True(body_1.definitions.Dto.properties.resultAsInt.format == "int32");
            Assert.True(body_1.definitions.Dto.title == "Dto");
        }
        
        
        [Fact]
        public async Task test_9() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "*/*");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/bessj/2098108/0.582090044?EMextraParam123=_EM_4_XYZ_");;
            
            Assert.Equal(400, (int) res_0.StatusCode);
            Assert.True(string.IsNullOrEmpty(await res_0.Content.ReadAsStringAsync()));
        }
        
        
        [Fact]
        public async Task test_10() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "*/*");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/remainder/523/-16776403?EMextraParam123=_EM_17_XYZ_");;
            
            Assert.Equal(400, (int) res_0.StatusCode);
            Assert.True(string.IsNullOrEmpty(await res_0.Content.ReadAsStringAsync()));
        }
        
        
        
        
        [Fact]
        public async Task test_12() {
            
            
            Client.DefaultRequestHeaders.Clear();
            Client.DefaultRequestHeaders.Add("Accept", "*/*");
            var res_0 = await Client.GetAsync(_fixture.baseUrlOfSut + "/api/fisher/475/919122561/0.9212286393800593?EMextraParam123=_EM_91_XYZ_");;
            
            Assert.Equal(400, (int) res_0.StatusCode);
            Assert.True(string.IsNullOrEmpty(await res_0.Content.ReadAsStringAsync()));
        }
        
        
    
    
    }


}
