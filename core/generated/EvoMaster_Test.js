const superagent = require("superagent");
const EM = require("evomaster-client-js").EMTestUtils;
const *AppController = require("./app-driver.js");
jest.setTimeout(60000);




/**
 * This file was automatically generated by EvoMaster on 2024-02-09T11:43:18.534-03:00[America/Argentina/Buenos_Aires]
 * 
 * The generated test suite contains 13 tests
 * 
 * Covered targets: 28
 * 
 * Used time: 0h 0m 10s
 * 
 * Needed budget for current results: 100%
 * 
 * 
 */

const controller = new *AppController();
let baseUrlOfSut;


beforeAll( async () => {
    await controller.setupForGeneratedTest();
    baseUrlOfSut = await controller.startSut();
    expect(baseUrlOfSut).toBeTruthy();
});


afterAll( async () => {
    await controller.stopSut();
});


beforeEach(async () =>  {
    await controller.resetStateOfSUT();
});




test("test_0_with500", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/fisher/336/0/-3309709.234405788").set('Accept', "*/*")
            .set("x-EMextraHeader123", "")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(500); // 
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


test("test_1", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/fisher/968/944/0.004970250400239351?EMextraParam123=_EM_0_XYZ_").set('Accept', "application/json")
            .set("x-EMextraHeader123", "_EM_1_XYZ_")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.resultAsDouble).toBe(9.477553783418402E-15);
});


test("test_2", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/triangle/772/8/241?EMextraParam123=_EM_2_XYZ_").set('Accept', "application/json")
            .set("x-EMextraHeader123", "")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.resultAsInt).toBe(0.0);
});


test("test_3", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/bessj/924/0.32551742893498536?EMextraParam123=42").set('Accept', "application/json")
            .set("x-EMextraHeader123", "_EM_4_XYZ_")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.resultAsDouble).toBe(0.0);
});


test("test_4", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/expint/290/0.44557681523818093?EMextraParam123=_EM_5_XYZ_").set('Accept', "application/json")
            .set("x-EMextraHeader123", "_EM_6_XYZ_")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.resultAsDouble).toBe(0.0022126830761608927);
});


test("test_5", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/gammq/0.6995297517751039/0.447107330582839?EMextraParam123=_EM_7_XYZ_").set('Accept', "application/json")
            .set("x-EMextraHeader123", "")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.resultAsDouble).toBe(0.47396685593132726);
});


test("test_6", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/remainder/950/377?EMextraParam123=_EM_9_XYZ_").set('Accept', "application/json")
            .set("x-EMextraHeader123", "")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.resultAsInt).toBe(196.0);
});


test("test_7", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/swagger.json").set('Accept', "*/*")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(200);
    expect(res_0.header["content-type"].startsWith("application/json")).toBe(true);
    expect(res_0.body.swagger).toBe("2.0");
    expect(res_0.body.info.description).toBe("Examples of different numerical algorithms accessible via REST");
    expect(res_0.body.info.version).toBe("1.0");
    expect(res_0.body.info.title).toBe("API for Numerical Case Study (NCS)");
    expect(res_0.body.schemes.length).toBe(1);
    expect(res_0.body.schemes[0]).toBe("http");
    expect(res_0.body.basePath).toBe("/");
    expect(res_0.body.tags.length).toBe(1);
    expect(res_0.body.tags[0].name).toBe("ncs-rest");
    expect(res_0.body.tags[0].description).toBe("Ncs Rest");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.tags.length).toBe(1);
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.tags[0]).toBe("ncs-rest");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.summary).toBe("bessj");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.operationId).toBe("bessjUsingGET");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.produces.length).toBe(1);
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.produces[0]).toBe("application/json");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters.length).toBe(2);
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[0].name).toBe("n");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[0].in).toBe("path");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[0].description).toBe("n");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[0].required).toBe(true);
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[0].type).toBe("integer");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[0].format).toBe("int32");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[1].name).toBe("x");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[1].in).toBe("path");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[1].description).toBe("x");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[1].required).toBe(true);
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[1].type).toBe("number");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.parameters[1].format).toBe("double");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.responses["200"].description).toBe("OK");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.responses["200"].schema["$ref"]).toBe("#/definitions/Dto");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.responses["200"].schema.originalRef).toBe("Dto");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.responses["401"].description).toBe("Unauthorized");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.responses["403"].description).toBe("Forbidden");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.responses["404"].description).toBe("Not Found");
    expect(res_0.body.paths["/api/bessj/{n}/{x}"].get.deprecated).toBe(false);
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.tags.length).toBe(1);
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.tags[0]).toBe("ncs-rest");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.summary).toBe("expint");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.operationId).toBe("expintUsingGET");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.produces.length).toBe(1);
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.produces[0]).toBe("application/json");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters.length).toBe(2);
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[0].name).toBe("n");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[0].in).toBe("path");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[0].description).toBe("n");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[0].required).toBe(true);
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[0].type).toBe("integer");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[0].format).toBe("int32");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[1].name).toBe("x");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[1].in).toBe("path");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[1].description).toBe("x");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[1].required).toBe(true);
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[1].type).toBe("number");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.parameters[1].format).toBe("double");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.responses["200"].description).toBe("OK");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.responses["200"].schema["$ref"]).toBe("#/definitions/Dto");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.responses["200"].schema.originalRef).toBe("Dto");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.responses["401"].description).toBe("Unauthorized");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.responses["403"].description).toBe("Forbidden");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.responses["404"].description).toBe("Not Found");
    expect(res_0.body.paths["/api/expint/{n}/{x}"].get.deprecated).toBe(false);
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.tags.length).toBe(1);
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.tags[0]).toBe("ncs-rest");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.summary).toBe("fisher");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.operationId).toBe("fisherUsingGET");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.produces.length).toBe(1);
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.produces[0]).toBe("application/json");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters.length).toBe(3);
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[0].name).toBe("m");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[0].in).toBe("path");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[0].description).toBe("m");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[0].required).toBe(true);
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[0].type).toBe("integer");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[0].format).toBe("int32");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[1].name).toBe("n");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[1].in).toBe("path");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[1].description).toBe("n");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[1].required).toBe(true);
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[1].type).toBe("integer");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[1].format).toBe("int32");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[2].name).toBe("x");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[2].in).toBe("path");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[2].description).toBe("x");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[2].required).toBe(true);
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[2].type).toBe("number");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.parameters[2].format).toBe("double");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.responses["200"].description).toBe("OK");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.responses["200"].schema["$ref"]).toBe("#/definitions/Dto");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.responses["200"].schema.originalRef).toBe("Dto");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.responses["401"].description).toBe("Unauthorized");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.responses["403"].description).toBe("Forbidden");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.responses["404"].description).toBe("Not Found");
    expect(res_0.body.paths["/api/fisher/{m}/{n}/{x}"].get.deprecated).toBe(false);
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.tags.length).toBe(1);
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.tags[0]).toBe("ncs-rest");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.summary).toBe("gammq");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.operationId).toBe("gammqUsingGET");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.produces.length).toBe(1);
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.produces[0]).toBe("application/json");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters.length).toBe(2);
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[0].name).toBe("a");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[0].in).toBe("path");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[0].description).toBe("a");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[0].required).toBe(true);
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[0].type).toBe("number");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[0].format).toBe("double");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[1].name).toBe("x");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[1].in).toBe("path");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[1].description).toBe("x");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[1].required).toBe(true);
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[1].type).toBe("number");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.parameters[1].format).toBe("double");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.responses["200"].description).toBe("OK");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.responses["200"].schema["$ref"]).toBe("#/definitions/Dto");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.responses["200"].schema.originalRef).toBe("Dto");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.responses["401"].description).toBe("Unauthorized");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.responses["403"].description).toBe("Forbidden");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.responses["404"].description).toBe("Not Found");
    expect(res_0.body.paths["/api/gammq/{a}/{x}"].get.deprecated).toBe(false);
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.tags.length).toBe(1);
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.tags[0]).toBe("ncs-rest");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.summary).toBe("remainder");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.operationId).toBe("remainderUsingGET");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.produces.length).toBe(1);
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.produces[0]).toBe("application/json");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters.length).toBe(2);
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[0].name).toBe("a");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[0].in).toBe("path");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[0].description).toBe("a");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[0].required).toBe(true);
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[0].type).toBe("integer");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[0].format).toBe("int32");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[1].name).toBe("b");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[1].in).toBe("path");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[1].description).toBe("b");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[1].required).toBe(true);
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[1].type).toBe("integer");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.parameters[1].format).toBe("int32");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.responses["200"].description).toBe("OK");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.responses["200"].schema["$ref"]).toBe("#/definitions/Dto");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.responses["200"].schema.originalRef).toBe("Dto");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.responses["401"].description).toBe("Unauthorized");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.responses["403"].description).toBe("Forbidden");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.responses["404"].description).toBe("Not Found");
    expect(res_0.body.paths["/api/remainder/{a}/{b}"].get.deprecated).toBe(false);
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.tags.length).toBe(1);
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.tags[0]).toBe("ncs-rest");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.summary).toBe("Check the triangle type of the given three edges");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.operationId).toBe("checkTriangleUsingGET");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.produces.length).toBe(1);
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.produces[0]).toBe("application/json");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters.length).toBe(3);
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[0].name).toBe("a");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[0].in).toBe("path");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[0].description).toBe("First edge");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[0].required).toBe(false);
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[0].type).toBe("integer");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[0].format).toBe("int32");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[1].name).toBe("b");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[1].in).toBe("path");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[1].description).toBe("Second edge");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[1].required).toBe(false);
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[1].type).toBe("integer");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[1].format).toBe("int32");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[2].name).toBe("c");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[2].in).toBe("path");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[2].description).toBe("Third edge");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[2].required).toBe(false);
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[2].type).toBe("integer");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.parameters[2].format).toBe("int32");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.responses["200"].description).toBe("OK");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.responses["200"].schema["$ref"]).toBe("#/definitions/Dto");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.responses["200"].schema.originalRef).toBe("Dto");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.responses["401"].description).toBe("Unauthorized");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.responses["403"].description).toBe("Forbidden");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.responses["404"].description).toBe("Not Found");
    expect(res_0.body.paths["/api/triangle/{a}/{b}/{c}"].get.deprecated).toBe(false);
    expect(res_0.body.definitions.Dto.type).toBe("object");
    expect(res_0.body.definitions.Dto.properties.resultAsDouble.type).toBe("number");
    expect(res_0.body.definitions.Dto.properties.resultAsDouble.format).toBe("double");
    expect(res_0.body.definitions.Dto.properties.resultAsInt.type).toBe("integer");
    expect(res_0.body.definitions.Dto.properties.resultAsInt.format).toBe("int32");
    expect(res_0.body.definitions.Dto.title).toBe("Dto");
});




test("test_9", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/fisher/349/1298013847/0.016315296368474286?EMextraParam123=_EM_23_XYZ_").set('Accept', "*/*")
            .set("x-EMextraHeader123", "42")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


test("test_10", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/remainder/33555158/33554949").set('Accept', "*/*")
            .set("x-EMextraHeader123", "")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


test("test_11", async () => {
    
    const res_0 = await superagent
            .get(baseUrlOfSut + "/api/bessj/2098076/0.32551742893498536?EMextraParam123=42").set('Accept', "*/*")
            .set("x-EMextraHeader123", "_EM_4_XYZ_")
            .ok(res => res.status);
    
    expect(res_0.status).toBe(400);
    expect(res_0.body===null || res_0.body===undefined || res_0.body==="" || Object.keys(res_0.body).length === 0).toBe(true);
});


