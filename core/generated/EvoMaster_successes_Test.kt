import  org.junit.jupiter.api.AfterAll
import  org.junit.jupiter.api.BeforeAll
import  org.junit.jupiter.api.BeforeEach
import  org.junit.jupiter.api.Test
import  org.junit.jupiter.api.Timeout
import  org.junit.jupiter.api.Assertions.*
import  java.util.List
import  org.evomaster.client.java.controller.api.EMTestUtils.*
import  org.evomaster.client.java.controller.SutHandler
import  io.restassured.RestAssured
import  io.restassured.RestAssured.given
import  io.restassured.response.ValidatableResponse
import  org.hamcrest.Matchers.*
import  io.restassured.config.JsonConfig
import  io.restassured.path.json.config.JsonPathConfig
import  io.restassured.config.RedirectConfig.redirectConfig
import  org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*
import  org.evomaster.client.java.controller.contentMatchers.StringMatcher.*
import  org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*
import  org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler
import  org.evomaster.client.java.controller.expect.ExpectationHandler
import  io.restassured.path.json.JsonPath
import  java.util.Arrays




/**
 * This file was automatically generated by EvoMaster on 2024-02-09T11:43:50.090-03:00\[America/Argentina/Buenos_Aires\]
 * 
 * The generated test suite contains 7 tests
 * 
 * Covered targets: 15
 * 
 * Used time: 0h 0m 10s
 * 
 * Needed budget for current results: 100%
 * 
 * This file contains test cases that represent successful calls.
 */
internal class EvoMaster_successes_Test {

    
    companion object {
        private val controller : SutHandler = *AppController()
        private lateinit var baseUrlOfSut: String
        /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
        * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
        */
        private val ems = false
        /**
        * sco - supported code oracle - checking that the response status code is among those supported according to the schema
        */
        private val sco = false
        
        
        @BeforeAll
        @JvmStatic
        fun initClass() {
            controller.setupForGeneratedTest()
            baseUrlOfSut = controller.startSut()
            controller.registerOrExecuteInitSqlCommandsIfNeeded()
            assertNotNull(baseUrlOfSut)
            RestAssured.enableLoggingOfRequestAndResponseIfValidationFails()
            RestAssured.useRelaxedHTTPSValidation()
            RestAssured.urlEncodingEnabled = false
            RestAssured.config = RestAssured.config()
                .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
                .redirect(redirectConfig().followRedirects(false))
        }
        
        
        @AfterAll
        @JvmStatic
        fun tearDown() {
            controller.stopSut()
        }
    }
    
    
    @BeforeEach
    fun initTest() {
        controller.resetStateOfSUT()
    }
    
    
    
    
    @Test @Timeout(60)
    fun test_0()  {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/fisher/-262789955/616/0.28409782274655915?EMextraParam123=_EM_14_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsDouble'", numberMatches(0.3333331102732156))
        
    }
    
    
    @Test @Timeout(60)
    fun test_1()  {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_3_XYZ_")
                .get("${baseUrlOfSut}/api/triangle/333/288/761135198?EMextraParam123=_EM_2_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(0.0))
        
    }
    
    
    @Test @Timeout(60)
    fun test_2()  {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/bessj/812/0.8494725409164618")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsDouble'", numberMatches(0.0))
        
    }
    
    
    @Test @Timeout(60)
    fun test_3()  {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/expint/732/0.6151308844802138")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsDouble'", numberMatches(7.388714249931015E-4))
        
    }
    
    
    @Test @Timeout(60)
    fun test_4()  {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "_EM_9_XYZ_")
                .get("${baseUrlOfSut}/api/gammq/0.2606236524767638/0.23953034047124222?EMextraParam123=_EM_8_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsDouble'", numberMatches(0.2733635048541554))
        
    }
    
    
    @Test @Timeout(60)
    fun test_5()  {
        
        given().accept("application/json")
                .header("x-EMextraHeader123", "")
                .get("${baseUrlOfSut}/api/remainder/175/77?EMextraParam123=_EM_10_XYZ_")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'resultAsInt'", numberMatches(21.0))
        
    }
    
    
    @Test @Timeout(60)
    fun test_6()  {
        val expectationHandler: ExpectationHandler = expectationHandler()
        
        val res_0: ValidatableResponse = given().accept("*/*")
                .get("${baseUrlOfSut}/swagger.json")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'swagger'", containsString("2.0"))
                .body("'info'.'description'", containsString("Examples of different numerical algorithms accessible via REST"))
                .body("'info'.'version'", containsString("1.0"))
                .body("'info'.'title'", containsString("API for Numerical Case Study (NCS)"))
                .body("'schemes'.size()", equalTo(1))
                .body("'schemes'", hasItems("http"))
                .body("'basePath'", containsString("/"))
                .body("'tags'.size()", equalTo(1))
                .body("'tags'[0].'name'", containsString("ncs-rest"))
                .body("'tags'[0].'description'", containsString("Ncs Rest"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'summary'", containsString("bessj"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'operationId'", containsString("bessjUsingGET"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'name'", containsString("n"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'description'", containsString("n"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'name'", containsString("x"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'description'", containsString("x"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'type'", containsString("number"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'parameters'[1].'format'", containsString("double"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'200'.'schema'.'\$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/bessj/{n}/{x}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'summary'", containsString("expint"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'operationId'", containsString("expintUsingGET"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'name'", containsString("n"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'description'", containsString("n"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'name'", containsString("x"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'description'", containsString("x"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'type'", containsString("number"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'parameters'[1].'format'", containsString("double"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'200'.'schema'.'\$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/expint/{n}/{x}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'summary'", containsString("fisher"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'operationId'", containsString("fisherUsingGET"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'name'", containsString("m"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'description'", containsString("m"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'name'", containsString("n"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'description'", containsString("n"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[1].'format'", containsString("int32"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'name'", containsString("x"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'description'", containsString("x"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'required'", equalTo(true))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'type'", containsString("number"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'parameters'[2].'format'", containsString("double"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'200'.'schema'.'\$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/fisher/{m}/{n}/{x}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'summary'", containsString("gammq"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'operationId'", containsString("gammqUsingGET"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'name'", containsString("a"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'description'", containsString("a"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'type'", containsString("number"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[0].'format'", containsString("double"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'name'", containsString("x"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'description'", containsString("x"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'type'", containsString("number"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'parameters'[1].'format'", containsString("double"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'200'.'schema'.'\$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/gammq/{a}/{x}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'summary'", containsString("remainder"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'operationId'", containsString("remainderUsingGET"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'.size()", equalTo(2))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'name'", containsString("a"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'description'", containsString("a"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'required'", equalTo(true))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'name'", containsString("b"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'description'", containsString("b"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'required'", equalTo(true))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'parameters'[1].'format'", containsString("int32"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'200'.'schema'.'\$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/remainder/{a}/{b}'.'get'.'deprecated'", equalTo(false))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'tags'.size()", equalTo(1))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'tags'", hasItems("ncs-rest"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'summary'", containsString("Check the triangle type of the given three edges"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'operationId'", containsString("checkTriangleUsingGET"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'produces'.size()", equalTo(1))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'produces'", hasItems("application/json"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'.size()", equalTo(3))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'name'", containsString("a"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'in'", containsString("path"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'description'", containsString("First edge"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'required'", equalTo(false))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'type'", containsString("integer"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[0].'format'", containsString("int32"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'name'", containsString("b"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'in'", containsString("path"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'description'", containsString("Second edge"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'required'", equalTo(false))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'type'", containsString("integer"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[1].'format'", containsString("int32"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'name'", containsString("c"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'in'", containsString("path"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'description'", containsString("Third edge"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'required'", equalTo(false))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'type'", containsString("integer"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'parameters'[2].'format'", containsString("int32"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'200'.'description'", containsString("OK"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'200'.'schema'.'\$ref'", containsString("#/definitions/Dto"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'200'.'schema'.'originalRef'", containsString("Dto"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'401'.'description'", containsString("Unauthorized"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'403'.'description'", containsString("Forbidden"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'responses'.'404'.'description'", containsString("Not Found"))
                .body("'paths'.'/api/triangle/{a}/{b}/{c}'.'get'.'deprecated'", equalTo(false))
                .body("'definitions'.'Dto'.'type'", containsString("object"))
                .body("'definitions'.'Dto'.'properties'.'resultAsDouble'.'type'", containsString("number"))
                .body("'definitions'.'Dto'.'properties'.'resultAsDouble'.'format'", containsString("double"))
                .body("'definitions'.'Dto'.'properties'.'resultAsInt'.'type'", containsString("integer"))
                .body("'definitions'.'Dto'.'properties'.'resultAsInt'.'format'", containsString("int32"))
                .body("'definitions'.'Dto'.'title'", containsString("Dto"))
        
        expectationHandler.expect(ems)
            /*
             Note: No supported codes appear to be defined. https://swagger.io/docs/specification/describing-responses/.
             This is somewhat unexpected, so the code below is likely to lead to a failed expectation
            */
            .that(sco, listOf<Int>().contains(res_0.extract().statusCode()))
    }


}
